#include "mpu6050.h"
#include "stdio.h"  
#include "xstatus.h"

/***** Definició variables *****/

XIic Iic;
XIic_Config * ConfigPtr;

Xint16 ACCEL_XOUT = 0;
Xint16 ACCEL_YOUT = 0;
Xint16 ACCEL_ZOUT = 0;
float ACCEL_XANGLE = 0;
float ACCEL_YANGLE = 0;
float GYRO_XRATE = 0;
float GYRO_YRATE = 0;
float GYRO_ZRATE = 0;
int G_R = 131.0;
float RAD2DEG = 57.259;
int A_R = 16384.0;

/***** Inicialització Sensor *****/


int MpuSensorInit(void){
	int Status;
	static int Initialized = FALSE;
	u8 registre_i_dada_que_volem_escriure [2] = {0};

	if (!Initialized){
		Initialized = TRUE;
		printf("Lookup Configuration\r\n");
		lcd_goto(0,0);
		lcd_puts("Lookup congig...");
		lcd_puts("                ");
		delay_ms(500);
		ConfigPtr =XIic_LookupConfig(IIC_DEVICE_ID);
		if (ConfigPtr == NULL){
			return XST_FAILURE;
			printf("Error: Lookup Configuration Failure!\r\n");
		}
		printf("Lookup Configuration OK\r\n");
		lcd_goto(0,0);
		lcd_puts("Lookup Confing ok");
		lcd_puts("                ");
		delay_ms(500);
		printf("Configuration Initialize \r\n");

		Status = XIic_CfgInitialize(&Iic, ConfigPtr, ConfigPtr->BaseAddress);
		if (Status != XST_SUCCESS){
			return XST_FAILURE;
			printf("Error: Configuration Initialize Failure!\r\n");
		}
		printf("Configuration Initialize OK\r\n");
		lcd_goto(0,0);
		lcd_puts("Cnfg init OK");
		lcd_puts("                ");
		delay_ms(500);
		printf("I2C Start \r\n");

		Status = XIic_Start(&Iic);
		if (Status != XST_SUCCESS){
			return XST_FAILURE;
			printf("Error: I2C Start Failure!\r\n");
		}
		printf("I2C Start OK\r\n");
		lcd_goto(0,0);
		lcd_puts("I2C start OK");
		lcd_puts("                ");
		delay_ms(500);
		printf("Setting Address I2C\r\n");

		Status = XIic_SetAddress(&Iic, XII_ADDR_TO_SEND_TYPE, MPU6050_ADDRESS);
		if (Status != XST_SUCCESS){
			return XST_FAILURE;
			printf("Error: Setting I2C Address Failure!\r\n");
		}
		printf("I2C Address OK\r\n");
		lcd_goto(0,0);
		lcd_puts("I2C adress OK");
		lcd_puts("                ");
		delay_ms(500);
	}
	if (XIic_IsIicBusy(&Iic)){
		printf("The Bus I2C is Busy\r\n");
	}
	else{
		printf("The Bus I2C is Free\r\n");
	}

	MPU6050_Test_I2C();

	registre_i_dada_que_volem_escriure[0] = MPU6050_PWR_MGMT_1;
	registre_i_dada_que_volem_escriure[1] = 0;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

	return Status;
}

void MPU6050_Test_I2C(){

	u8 registre_que_volem_llegir = MPU6050_WHO_AM_I;
    u8 dades_rebudes_del_mpu = 0;

    printf("Starting MPU6050 I2C Test\r\n");
    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP); //XIIC_REPEATED_START
    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &dades_rebudes_del_mpu, 1, XIIC_STOP);

    if (dades_rebudes_del_mpu == MPU6050_ADDRESS){
    	printf("I2C Read Test OK\r\n");
    	printf("MPU6050 Address: 0x%x\r\n",dades_rebudes_del_mpu);
    }
    else{
    	printf("I2C Read Test Failure\r\n");
    	printf("MPU6050 Address: 0x%x\r\n",dades_rebudes_del_mpu);
    	//STOP!!
        while(1){}
    }
}


/***** Setup del sensor MPU6050 *****/
void Setup_MPU6050()
{
	u8 registre_i_dada_que_volem_escriure[2] = {0,0};


    //Sets sample rate to 8000/1+7 = 1000Hz
	registre_i_dada_que_volem_escriure[0] = MPU6050_SMPLRT_DIV;
	registre_i_dada_que_volem_escriure[1] = 0x07;
    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Disable FSync, 256Hz DLPF
    registre_i_dada_que_volem_escriure[0] = MPU6050_CONFIG;
	registre_i_dada_que_volem_escriure[1] = 0x00;
    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Disable gyro self tests, scale of 250 degrees/s  gyro_sensivity = 131
    registre_i_dada_que_volem_escriure[0] = MPU6050_GYRO_CONFIG;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);
	
	
    //Disable accel self tests, scale of +-2g, no DHPF
	registre_i_dada_que_volem_escriure[0] = MPU6050_ACCEL_CONFIG;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Freefall threshold of |0mg|
	registre_i_dada_que_volem_escriure[0] = MPU6050_FF_THR;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Freefall duration limit of 0
	registre_i_dada_que_volem_escriure[0] = MPU6050_FF_DUR;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Motion threshold of 0mg
	registre_i_dada_que_volem_escriure[0] = MPU6050_MOT_THR;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Motion duration of 0s
	registre_i_dada_que_volem_escriure[0] = MPU6050_MOT_DUR;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Zero motion threshold
	registre_i_dada_que_volem_escriure[0] = MPU6050_ZRMOT_THR;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Zero motion duration threshold
	registre_i_dada_que_volem_escriure[0] = MPU6050_ZRMOT_DUR;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Disable sensor output to FIFO buffer
	registre_i_dada_que_volem_escriure[0] = MPU6050_FIFO_EN;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

 
    //AUX I2C setup
    //Sets AUX I2C to single master control, plus other config
	registre_i_dada_que_volem_escriure[0] = MPU6050_I2C_MST_CTRL;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    
    //Enable data ready interrupt
	registre_i_dada_que_volem_escriure[0] = MPU6050_INT_ENABLE;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);
 
    
    //Reset sensor signal paths
	registre_i_dada_que_volem_escriure[0] = MPU6050_SIGNAL_PATH_RESET;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Motion detection control
	registre_i_dada_que_volem_escriure[0] = MPU6050_MOT_DETECT_CTRL;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Disables FIFO, AUX I2C, FIFO and I2C reset bits to 0
	registre_i_dada_que_volem_escriure[0] = MPU6050_USER_CTRL;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Sets clock source to gyro reference w/ PLL
	registre_i_dada_que_volem_escriure[0] = MPU6050_PWR_MGMT_1;
	registre_i_dada_que_volem_escriure[1] = 0b00000010;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Controls frequency of wakeups in accel low power mode plus the sensor standby modes
	registre_i_dada_que_volem_escriure[0] = MPU6050_PWR_MGMT_2;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

    //Data transfer to and from the FIFO buffer
	registre_i_dada_que_volem_escriure[0] = MPU6050_FIFO_R_W;
	registre_i_dada_que_volem_escriure[1] = 0x00;
	XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_i_dada_que_volem_escriure[0], 2, XIIC_STOP);

 
    xil_printf("MPU6050 Setup Complete\r\n");
    lcd_goto(0,0);
    lcd_puts("MPU Setup OK");
    lcd_puts("                ");
	delay_ms(500);
}

/***** Calibració dels Giroscopis *****/
void Calibrate_Gyros()
{
	xil_printf("Calibrating Gyros...");

	u8 registre_que_volem_llegir = 0;
	u8 GYRO_XOUT_H, GYRO_XOUT_L, GYRO_YOUT_H, GYRO_YOUT_L, GYRO_ZOUT_H, GYRO_ZOUT_L;
	Xint32 GYRO_XOUT_OFFSET_1000SUM = 0, GYRO_YOUT_OFFSET_1000SUM = 0, GYRO_ZOUT_OFFSET_1000SUM = 0;
	Xuint16 data[3] = {0};

	int x = 0;
	for(x = 0; x<1000; x++)
	{
		
		registre_que_volem_llegir = MPU6050_GYRO_XOUT_H;
	    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
	    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &GYRO_XOUT_H, 1, XIIC_STOP);
		registre_que_volem_llegir = MPU6050_GYRO_XOUT_L;
	    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
	    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &GYRO_XOUT_L, 1, XIIC_STOP);

		registre_que_volem_llegir = MPU6050_GYRO_YOUT_H;
	    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
	    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &GYRO_YOUT_H, 1, XIIC_STOP);
		registre_que_volem_llegir = MPU6050_GYRO_YOUT_L;
	    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
	    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &GYRO_YOUT_L, 1, XIIC_STOP);

		registre_que_volem_llegir = MPU6050_GYRO_ZOUT_H;
	    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
	    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &GYRO_ZOUT_H, 1, XIIC_STOP);
		registre_que_volem_llegir = MPU6050_GYRO_ZOUT_L;
	    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
	    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &GYRO_ZOUT_L, 1, XIIC_STOP);
 
		GYRO_XOUT_OFFSET_1000SUM += ((GYRO_XOUT_H<<8)|GYRO_XOUT_L);
		GYRO_YOUT_OFFSET_1000SUM += ((GYRO_YOUT_H<<8)|GYRO_YOUT_L);
		GYRO_ZOUT_OFFSET_1000SUM += ((GYRO_ZOUT_H<<8)|GYRO_ZOUT_L);
		
		Get_GyroRates(&data[0]);
		GYRO_XOUT_OFFSET_1000SUM += data[0];
		GYRO_YOUT_OFFSET_1000SUM += data[1];
		GYRO_ZOUT_OFFSET_1000SUM += data[2];
 
		delay_ms(1);
	}	
	GYRO_XOUT_OFFSET = GYRO_XOUT_OFFSET_1000SUM/1000;
	GYRO_YOUT_OFFSET = GYRO_YOUT_OFFSET_1000SUM/1000;
	GYRO_ZOUT_OFFSET = GYRO_ZOUT_OFFSET_1000SUM/1000;
 
	xil_printf("\r\nGyro X offset sum: %ld Gyro X offset: %d", GYRO_XOUT_OFFSET_1000SUM, GYRO_XOUT_OFFSET);
	xil_printf("\r\nGyro Y offset sum: %ld Gyro Y offset: %d", GYRO_YOUT_OFFSET_1000SUM, GYRO_YOUT_OFFSET);
	xil_printf("\r\nGyro Z offset sum: %ld Gyro Z offset: %d", GYRO_ZOUT_OFFSET_1000SUM, GYRO_ZOUT_OFFSET);
	xil_printf("\r\n");
}	



/***** Valors RAW del Accelerometre *****/
void Get_Accel_Values(){

	Xuint8 ACCEL_XOUT_H = 0;
	Xuint8 ACCEL_XOUT_L = 0;
	Xuint8 ACCEL_YOUT_H = 0;
	Xuint8 ACCEL_YOUT_L = 0;
	Xuint8 ACCEL_ZOUT_H = 0;
	Xuint8 ACCEL_ZOUT_L = 0;
	u8 registre_que_volem_llegir = 0;

	registre_que_volem_llegir = MPU6050_ACCEL_XOUT_H;
    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &ACCEL_XOUT_H, 1, XIIC_STOP);
	registre_que_volem_llegir = MPU6050_ACCEL_XOUT_L;
    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &ACCEL_XOUT_L, 1, XIIC_STOP);

	registre_que_volem_llegir = MPU6050_ACCEL_YOUT_H;
    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &ACCEL_YOUT_H, 1, XIIC_STOP);
	registre_que_volem_llegir = MPU6050_ACCEL_YOUT_L;
    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &ACCEL_YOUT_L, 1, XIIC_STOP);

	registre_que_volem_llegir = MPU6050_ACCEL_ZOUT_H;
    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &ACCEL_ZOUT_H, 1, XIIC_STOP);
	registre_que_volem_llegir = MPU6050_ACCEL_ZOUT_L;
    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &registre_que_volem_llegir, 1, XIIC_STOP);
    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &ACCEL_ZOUT_L, 1, XIIC_STOP);
 
	ACCEL_XOUT = ((ACCEL_XOUT_H<<8)|ACCEL_XOUT_L) & 0xFFFF;
	ACCEL_YOUT = ((ACCEL_YOUT_H<<8)|ACCEL_YOUT_L) & 0xFFFF;
	ACCEL_ZOUT = ((ACCEL_ZOUT_H<<8)|ACCEL_ZOUT_L) & 0xFFFF;

	
	//printf("RAW Accel X: %d\r\n", ACCEL_XOUT);
	//printf("RAW Accel Y: %d\r\n", ACCEL_YOUT);
	//printf("RAW Accel Z: %d\r\n", ACCEL_ZOUT);

}

/***** Valors RAW del Giroscopi *****/
void Get_GyroRates( Xuint16 * data){

	Xuint8 GYROS_OUT_XYZ_HL[6] = {0};
	Xint16 GYROS_OUT_XYZ[3] = {0};
	Xuint8 registre_que_volem_llegir[6] = {MPU6050_GYRO_XOUT_H, MPU6050_GYRO_XOUT_L, MPU6050_GYRO_YOUT_H, MPU6050_GYRO_YOUT_L, MPU6050_GYRO_ZOUT_H, MPU6050_GYRO_ZOUT_L};
	Xuint8 i = 0;
	

	for(i = 0; i < 3; i++)
	{
	    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &(registre_que_volem_llegir[2*i]), 1, XIIC_STOP);
	    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &GYROS_OUT_XYZ_HL[(2*i)], 1, XIIC_STOP);

	    XIic_Send(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &(registre_que_volem_llegir[(2*i)+1]), 1, XIIC_STOP);
	    XIic_Recv(ConfigPtr->BaseAddress, MPU6050_ADDRESS, &GYROS_OUT_XYZ_HL[(2*i)+1], 1, XIIC_STOP);
	}

	GYROS_OUT_XYZ[0] = ((GYROS_OUT_XYZ_HL[0]<<8)|GYROS_OUT_XYZ_HL[1])-GYRO_XOUT_OFFSET;
	GYROS_OUT_XYZ[1] = ((GYROS_OUT_XYZ_HL[2]<<8)|GYROS_OUT_XYZ_HL[3])-GYRO_YOUT_OFFSET;
	GYROS_OUT_XYZ[2] = ((GYROS_OUT_XYZ_HL[4]<<8)|GYROS_OUT_XYZ_HL[5])-GYRO_ZOUT_OFFSET;

	GYRO_XRATE = (float)GYROS_OUT_XYZ[0]/G_R;
	GYRO_YRATE = (float)GYROS_OUT_XYZ[1]/G_R;
	GYRO_ZRATE = (float)GYROS_OUT_XYZ[2]/G_R;

	//printf("RAW Gyro Rate X: %d\r\n", (int) GYRO_XRATE);
	//printf("RAW Gyro Rate Y: %d\r\n", (int) GYRO_YRATE);
	//printf("RAW Gyro Rate Z: %d\r\n", (int) GYRO_ZRATE);
}

/***** Càlcul Angles *****/
void Get_Accel_Angles(){

	ACCEL_XANGLE = atan(((float) ((ACCEL_YOUT*1.0f)/(A_R*1.0f)))/sqrt(pow((float)((ACCEL_XOUT*1.0f)/(A_R*1.0f)),2) + pow((float) ((ACCEL_ZOUT*1.0f)/(A_R*1.0f)),2)))*RAD2DEG;
	ACCEL_YANGLE = atan(-1.0f*((float) ((ACCEL_XOUT*1.0f)/(A_R*1.0f)))/sqrt(pow((float) ((ACCEL_YOUT*1.0f)/(A_R*1.0f)),2) + pow((float) ((ACCEL_ZOUT*1.0f)/(A_R*1.0f)),2)))*RAD2DEG;
}

/***** Filtre Complementari *****/
void filtre (u32 start, u32 end){

	double dT = (double) (((double)(end-start))/((double) XPAR_AXI_TIMER_1_CLOCK_FREQ_HZ));
	
	ACCEL_XANGLE = 0.98 * (ACCEL_XANGLE + GYRO_XRATE * dT) + 0.02 * (ACCEL_XOUT/A_R);
	ACCEL_YANGLE = 0.98 * (ACCEL_YANGLE + GYRO_YRATE * dT) + 0.02 * (ACCEL_YOUT/A_R);
}