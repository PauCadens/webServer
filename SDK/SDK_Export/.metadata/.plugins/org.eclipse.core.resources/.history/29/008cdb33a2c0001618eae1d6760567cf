#include "xparameters.h"
#include "xbasic_types.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xtmrctr.h"
#include "display.h"
#include "mpu6050.h"
#include "stdlib.h"
#include "stdio.h"

u32 filterTimerStart(void);
u32 filterTimerEnd(void);
void getAsciiValues(float value, char * buffer);

// Global variables

XGpio GpioOutput;
XTmrCtr DelayTimer;
XTmrCtr FilterTimer;

extern float ACCEL_XANGLE;
extern float ACCEL_YANGLE;
extern float ACCEL_ZANGLE;
extern float GYRO_XRATE;
extern float GYRO_YRATE;
extern float GYRO_ZRATE;
extern Xint16 ACCEL_XOUT;
extern Xint16 ACCEL_YOUT;
extern Xint16 ACCEL_ZOUT;
u16 data[3] = {0};
u32 start = 0;
u32 end = 0;

char fila1[17] = {'X', ':', '\0', '\0', 'º','\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0'};
char fila2[17] = {'Y', ':', '\0', '\0', 'º', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0'};

/*char fila1[17] = {'A','N','G','L','E',' ','X',':','\0', '\0', '\0', '\0', '\0', 'º', '\0', '\0', '\0',};
char fila2[17] = {'A','N','G','L','E',' ','Y',':','\0', '\0', '\0', '\0', '\0', 'º', '\0', '\0', '\0',};*/

// Main function

int main (void)
{
  Xuint32 status;

  // Clear the screen
  xil_printf("%c[2J",27);
  xil_printf("16x2 LCD Driver\r\n");
  xil_printf("\r\n");

  // Initialize the Timer for LCD
  status = XTmrCtr_Initialize(&DelayTimer, XPAR_AXI_TIMER_0_DEVICE_ID);
  if (status != XST_SUCCESS){
    xil_printf("Timer failed to initialize\r\n");
    return XST_FAILURE;
  }
  XTmrCtr_SetOptions(&DelayTimer, 1, XTC_DOWN_COUNT_OPTION);

  // Initialize the Timer for filter
  status = XTmrCtr_Initialize(&FilterTimer, XPAR_AXI_TIMER_1_DEVICE_ID);
  if (status != XST_SUCCESS){
    xil_printf("Timer failed to initialize\r\n");
    return XST_FAILURE;
  }
  XTmrCtr_SetResetValue(&FilterTimer, 1, 0);
  XTmrCtr_Start(&FilterTimer, 1);

  // Initialize the GPIO driver for the LCD
   status = XGpio_Initialize(&GpioOutput, XPAR_DISPLAY16X2_DEVICE_ID);
   if (status != XST_SUCCESS){
     xil_printf("GPIO failed to initialize\r\n");
     return XST_FAILURE;
   }

  // Set the direction for all signals to be outputs
  XGpio_SetDataDirection(&GpioOutput, 1, 0x00);

  // Initialize the LCD
  lcd_init();
  xil_printf("LCD INIT OK\r\n");
  lcd_goto(0,0);
  lcd_puts("LCD ok");
  lcd_puts("                ");
  delay_ms(500);
  lcd_goto(0,0);
  MpuSensorInit();
  lcd_goto(0,0);
  lcd_puts("                ");

  Calibrate_Gyros();

  while(1)
  {
	  start = filterTimerStart();
	  Get_Accel_Values();
	  Get_GyroRates(&data[0]);
	  Get_Accel_Angles();
	  filtre(start, end);

	  //sprintf(&fila1[0], "X:%5.1f    ", ACCEL_XANGLE);
	  //sprintf(&fila2[0], "Y:%5.1f    ", ACCEL_YANGLE);
	  //printf("X: %5.2f\t Y: %5.2f\r\n", ACCEL_XANGLE, ACCEL_YANGLE);
	  //printf("X: %5.2f\r\n",ACCEL_XANGLE);
	  //printf("Y: %5.2f\r\n",ACCEL_YANGLE);

	  lcd_goto(0,0);
	  lcd_puts(&fila1[0]);
	  lcd_goto(1,0);
	  lcd_puts(&fila2[0]);

	  delay_ms(50);
	  end = filterTimerEnd();
    printf("hola\n\r");
  }
}

u32 filterTimerStart(void){

	XTmrCtr_Reset(&FilterTimer, 1);
	return XTmrCtr_GetValue(&FilterTimer, 1);
}

u32 filterTimerEnd(void){

	return XTmrCtr_GetValue(&FilterTimer, 1);
}
